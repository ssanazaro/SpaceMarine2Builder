@page "/"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using SpaceMarine2Builder.Shared.Models

<h3>Space Marines</h3>

@if (spaceMarines == null)
{
    <p>Loading...</p>
}
else
{
    <div class="grid-container">
        @foreach (var marine in spaceMarines.Take(6))
        {
            <div class="marine-box @(selectedMarine == marine ? "selected" : "")"
                 @onclick="() => SelectMarine(marine)">
                @marine.Role
            </div>
        }
    </div>

    @if (selectedMarine != null && perks != null)
    {
        <div class="perks-container">
            <!-- Starting perk -->
            @{
                var startingPerk = perks.FirstOrDefault(p => p.Type == "Starting" && p.Level == 1);
            }
            @if (startingPerk != null)
            {
                <div class="perk-starting">
                    <span class="perk-name">@startingPerk.Name</span>
                    <span class="perk-description">@startingPerk.Description</span>
                </div>
            }

            <!-- Regular perks fixed-size container -->
            <div class="regular-perks-container">
                <div class="perks-grid">
                    @foreach (var perk in perks.Where(p => p.Type != "Starting"))
                    {
                        var isSelected = selectedPerks.ContainsKey(perk.Type) && selectedPerks[perk.Type] == perk.PerkId;

                        <div class="perk-option @(isSelected ? "selected" : "")"
                             @onclick="@(() => OnClickRegularPerk(perk.Type, perk.PerkId))">
                            <span class="perk-name">@perk.Name</span>
                            <span class="perk-description">@perk.Description</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Prestige perks -->
            @if (prestigePerks != null)
            {
                <h4>Prestige Perks (select up to 4)</h4>
                <div class="prestige-grid">
                    @foreach (var perk in prestigePerks)
                    {
                        var isSelected = selectedPrestigePerks.Contains(perk.PerkId);

                        <div class="perk-option @(isSelected ? "selected" : "")"
                             @onclick="@(() => OnClickPrestigePerk(perk.PerkId))">
                            <span class="perk-name">@perk.Name</span>
                            <span class="perk-description">@perk.Description</span>
                        </div>
                    }
                </div>
            }

            <div class="share-row">
                <button class="share-button" @onclick="CopyCurrentUrlToClipboard">Copy Shareable Link</button>
                <span>@copyMessage</span>
            </div>
        </div>
    }
}

@code {
    // Data & state
    private List<SpaceMarine> spaceMarines;
    private SpaceMarine selectedMarine;

    private List<Perk> perks;
    private Dictionary<string, int> selectedPerks = new(); // Type -> PerkId (regular perks)

    private List<Perk> prestigePerks;
    private HashSet<int> selectedPrestigePerks = new();
    private const int MaxPrestigeSelections = 4;

    private string copyMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // 1) Load space marines
        spaceMarines = await Http.GetFromJsonAsync<List<SpaceMarine>>("data/SpaceMarines.json");

        // 2) Parse query string from URL (no external WebUtilities)
        var parsed = QueryStringHelper.ParseQuery(new Uri(NavManager.Uri).Query);

        // Support param name "class" or "classId"
        int classId = 0;
        if (parsed.TryGetValue("class", out var cl) && int.TryParse(cl, out var cid))
            classId = cid;
        else if (parsed.TryGetValue("classId", out var cl2) && int.TryParse(cl2, out var cid2))
            classId = cid2;

        // If class specified, pre-select marine and load perks
        if (classId > 0)
        {
            var marine = spaceMarines.FirstOrDefault(m => m.ClassId == classId);
            if (marine != null)
            {
                await SelectMarine(marine);

                // 3) Parse regular perks: format expected => regular=<urlencodedType>:<perkId>;<urlencodedType>:<perkId>
                if (parsed.TryGetValue("regular", out var regularValue) && !string.IsNullOrWhiteSpace(regularValue))
                {
                    var entries = regularValue.Split(';', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var entry in entries)
                    {
                        var idx = entry.IndexOf(':');
                        if (idx > -1)
                        {
                            var rawType = Uri.UnescapeDataString(entry.Substring(0, idx));
                            var val = entry.Substring(idx + 1);
                            if (int.TryParse(val, out var pId))
                            {
                                // Only set if that type exists for this class (defensive)
                                if (perks.Any(p => p.Type == rawType && p.PerkId == pId))
                                    selectedPerks[rawType] = pId;
                            }
                        }
                    }
                }

                // 4) Parse prestige: format => prestige=12,15,18
                if (parsed.TryGetValue("prestige", out var prestigeValue) && !string.IsNullOrWhiteSpace(prestigeValue))
                {
                    var parts = prestigeValue.Split(',', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var s in parts)
                        if (int.TryParse(s, out var pid))
                            selectedPrestigePerks.Add(pid);
                }
            }
        }
    }

    // Called when user clicks a regular perk
    private void OnClickRegularPerk(string type, int perkId)
    {
        // Only one perk per type
        selectedPerks[type] = perkId;
        UpdateUrlFromState();
    }

    // Called when user clicks a prestige perk
    private void OnClickPrestigePerk(int perkId)
    {
        if (selectedPrestigePerks.Contains(perkId))
            selectedPrestigePerks.Remove(perkId);
        else if (selectedPrestigePerks.Count < MaxPrestigeSelections)
            selectedPrestigePerks.Add(perkId);

        UpdateUrlFromState();
    }

    // Select a marine -> load perks & prestige perks
    private async Task SelectMarine(SpaceMarine marine)
    {
        selectedMarine = marine;
        selectedPerks.Clear();
        selectedPrestigePerks.Clear();

        var allPerks = await Http.GetFromJsonAsync<List<Perk>>("data/Perks.json");
        var allPrestige = await Http.GetFromJsonAsync<List<Perk>>("data/PrestigePerks.json");

        perks = allPerks.Where(p => p.ClassId == marine.ClassId).ToList();
        prestigePerks = allPrestige.Where(p => p.ClassId == marine.ClassId).ToList();

        var starting = perks.FirstOrDefault(p => p.Type == "Starting" && p.Level == 1);
        if (starting != null)
            selectedPerks["Starting"] = starting.PerkId;
    }

    // Build query string from current selections and update the address bar (replace history)
    private void UpdateUrlFromState()
    {
        var parts = new List<string>();

        if (selectedMarine != null)
            parts.Add($"class={selectedMarine.ClassId}");

        // regular: encode as type:perkId pairs separated by semicolons, type is URI-escaped
        var regularPairs = selectedPerks
            .Where(kv => !string.Equals(kv.Key, "Starting", StringComparison.OrdinalIgnoreCase)) // optional: skip starting
            .Select(kv => $"{Uri.EscapeDataString(kv.Key)}:{kv.Value}")
            .ToList();

        if (regularPairs.Any())
            parts.Add($"regular={string.Join(";", regularPairs)}");

        // prestige: comma separated list of ids
        if (selectedPrestigePerks.Any())
            parts.Add($"prestige={string.Join(",", selectedPrestigePerks)}");

        var baseUri = NavManager.Uri.Split('?', 2)[0]; // keep base path, drop existing query
        var newUri = parts.Any() ? $"{baseUri}?{string.Join("&", parts)}" : baseUri;

        // Use replace to avoid spamming browser history
        NavManager.NavigateTo(newUri, forceLoad: false, replace: true);
    }

    // Copy current URL to clipboard and show a small message
    private async Task CopyCurrentUrlToClipboard()
    {
        var currentUrl = NavManager.Uri;
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", currentUrl);
        copyMessage = "Link copied!";
        StateHasChanged();
        // clear message after a short delay
        _ = Task.Run(async () =>
        {
            await Task.Delay(2000);
            copyMessage = string.Empty;
            await InvokeAsync(StateHasChanged);
        });
    }

    // Lightweight query string parser (no WebUtilities)
    public static class QueryStringHelper
    {
        public static Dictionary<string, string> ParseQuery(string queryString)
        {
            var result = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

            if (string.IsNullOrEmpty(queryString))
                return result;

            if (queryString.StartsWith("?"))
                queryString = queryString.Substring(1);

            var parts = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);
            foreach (var part in parts)
            {
                var idx = part.IndexOf('=');
                if (idx >= 0)
                {
                    var key = Uri.UnescapeDataString(part.Substring(0, idx));
                    var val = Uri.UnescapeDataString(part.Substring(idx + 1));
                    result[key] = val;
                }
                else
                {
                    var key = Uri.UnescapeDataString(part);
                    result[key] = string.Empty;
                }
            }

            return result;
        }
    }
}
